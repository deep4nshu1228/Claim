import pandas as pd


import pandas as pd

def calculate_remaining_age_cost(df):
    # Sort by bike, dispatch month, and age ascending for efficient slicing
    df = df.sort_values(['BIKE_GROUPED', 'DISPATCH_MONTH', 'AGE'])
    
    # Create a dictionary to hold cumulative sums by bike and dispatch month for quick lookup
    cumulative_costs = {}

    # Group by bike and dispatch month
    grouped = df.groupby(['BIKE_GROUPED', 'DISPATCH_MONTH'])

    # For each group, calculate cumulative sums of warranty cost from highest age down to lowest
    for (bike, dispatch_month), group in grouped:
        group_sorted = group.sort_values('AGE', ascending=False)
        cum_sum = group_sorted['WARRANTY_COST'].cumsum().iloc[::-1].reset_index(drop=True)
        
        # Map cumulative sum back to age
        age_to_cum_cost = dict(zip(group_sorted['AGE'][::-1].values, cum_sum))
        
        cumulative_costs[(bike, dispatch_month)] = age_to_cum_cost

    # Function to get cumulative cost for each row
    def get_cum_cost(row):
        bike = row['BIKE_GROUPED']
        dispatch_month = row['DISPATCH_MONTH']
        age = row['AGE']
        return cumulative_costs.get((bike, dispatch_month), {}).get(age, 0)

    # Apply function to dataframe
    df['REMAINING_AGE_COST'] = df.apply(get_cum_cost, axis=1)

    return df



def create_model_sheets_age_rows_single_dispatch_col(
    df, start_dispatch_month, end_dispatch_month, output_filename='model_warranty_costs_by_age.xlsx'
):
    df['DISPATCH_MONTH'] = pd.to_datetime(df['DISPATCH_MONTH'], format='%Y-%m')
    start_date = pd.to_datetime(start_dispatch_month, format='%Y-%m')
    end_date = pd.to_datetime(end_dispatch_month, format='%Y-%m')

    # Filter by dispatch month range
    df_filtered = df[(df['DISPATCH_MONTH'] >= start_date) & (df['DISPATCH_MONTH'] <= end_date)].copy()

    # Calculate remaining age costs previously defined
    df_filtered = calculate_remaining_age_cost(df_filtered)
    df_filtered['REMAINING_AGE'] = 60 - df_filtered['AGE']
    df_filtered['PER_UNIT_COST'] = df_filtered['REMAINING_AGE_COST'] / df_filtered['VOLUME'] / df_filtered['REMAINING_AGE']
    df_filtered['PER_VOLUME_COST'] = df_filtered['REMAINING_AGE_COST'] / df_filtered['VOLUME']

    with pd.ExcelWriter(output_filename, engine='xlsxwriter') as writer:
        bike_models = df_filtered['BIKE_GROUPED'].unique()

        for model in bike_models:
            model_df = df_filtered[df_filtered['BIKE_GROUPED'] == model].copy()

            # Pivot table with index: AGE, columns: DISPATCH_MONTH, values: PER_UNIT_COST
            pivot_per_unit = model_df.pivot_table(
                index='AGE',
                columns=model_df['DISPATCH_MONTH'].dt.strftime('%Y-%m'),
                values='PER_UNIT_COST',
                aggfunc='first'
            )

            # Pivot table with index: AGE, columns: DISPATCH_MONTH, values: PER_VOLUME_COST
            pivot_per_volume = model_df.pivot_table(
                index='AGE',
                columns=model_df['DISPATCH_MONTH'].dt.strftime('%Y-%m'),
                values='PER_VOLUME_COST',
                aggfunc='first'
            )

            # Combine both pivot tables with multi-index columns
            pivot_combined = pd.concat(
                {'Per Unit Cost': pivot_per_unit, 'Per Volume Cost': pivot_per_volume},
                axis=1
            )

            pivot_combined.to_excel(writer, sheet_name=model)

    print(f'Data saved in {output_filename}')


# Make sure to have the calculate_remaining_age_cost function defined from above

# Example usage:
# create_model_sheets_with_remaining_costs(df, '2020-01', '2023-01')
