WITH converted_data AS (
  SELECT
    *,
    -- Handle warranty_taken_date (YYYYMMDD) with edge cases
    CASE 
      WHEN warranty_taken_date = 0 THEN NULL
      WHEN LENGTH(warranty_taken_date::VARCHAR) < 8 THEN 
          TRY_TO_DATE(LPAD(warranty_taken_date::VARCHAR, 8, '0'), 'YYYYMMDD')
      ELSE TRY_TO_DATE(warranty_taken_date::VARCHAR, 'YYYYMMDD')
    END AS warranty_date,
    
    -- Handle sell_date (YYYYMM) with edge cases
    CASE 
      WHEN sell_date = 0 THEN NULL
      WHEN LENGTH(sell_date::VARCHAR) < 6 THEN 
          TRY_TO_DATE(LPAD(sell_date::VARCHAR, 6, '0') || '01', 'YYYYMMDD')
      ELSE TRY_TO_DATE(sell_date::VARCHAR || '01', 'YYYYMMDD')
    END AS sale_date
  FROM warranty_data
),

clean_data AS (
  SELECT
    *,
    -- Calculate product age only for valid dates
    DATEDIFF('month', sale_date, warranty_date) AS product_age_months,
    DATE_TRUNC('month', warranty_date) AS claim_month
  FROM converted_data
  -- Filter out invalid date combinations
  WHERE 
    warranty_date IS NOT NULL
    AND sale_date IS NOT NULL
    AND warranty_date >= sale_date  -- Claims can't happen before sale
    AND product_age_months BETWEEN 0 AND 120  -- 10-year max warranty
)

-- Main EDA queries use clean_data CTE now
SELECT * FROM clean_data;




import pandas as pd
from datetime import datetime, timedelta

today = pd.Timestamp.today()

five_years_ago = today - pd.DateOffset(years=5)

df_last_5_years = df[df['date'] >= five_years_ago]




import xgboost as xgb
import pandas as pd
import matplotlib.pyplot as plt
 
# Assume your trained model is 'model'
# And you have feature names in 'X.columns' (your training features)
 
# Get raw feature importances
importances = model.feature_importances_
 
# Convert to percentage
importances_percent = 100.0 * (importances / importances.sum())
 
# Create a DataFrame for easier plotting
importance_df = pd.DataFrame({
    'Feature': model.get_booster().feature_names,
    'Importance (%)': importances_percent
}).sort_values(by='Importance (%)', ascending=False)
 
# Plot
plt.figure(figsize=(10, 6))
plt.barh(importance_df['Feature'], importance_df['Importance (%)'])
plt.xlabel('Importance (%)')
plt.ylabel('Features')
plt.title('XGBoost Feature Importance (in %)')
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()
























if PLANT_COL in df.columns:
    plant_test = df.loc[X_test.index, PLANT_COL]
    summary = (
        pd.DataFrame({
            "plant": plant_test.values,
            "price_real": y_test.values,
            "price_pred": y_pred,
        })
        .groupby("plant")[["price_real", "price_pred"]]
        .sum()
        .assign(diff=lambda d: d.price_pred - d.price_real)
    )
    print("\nPlant-wise totals (test set):")
    print(summary)
else:
    print(f"Column '{PLANT_COL}' not found â€“ skipping plant-wise totals.")
 

 
