importance_dict = model.get_booster().get_score(importance_type='weight')
feature_importance_df = pd.DataFrame(list(importance_dict.items()), columns=['feature', 'weight'])
feature_importance_df['weight_pct'] = 100 * feature_importance_df['weight'] / feature_importance_df['weight'].sum()
feature_importance_df = feature_importance_df.sort_values(by='weight_pct', ascending=False)

print(feature_importance_df)

# Optional: plot
sns.barplot(x='weight_pct', y='feature', data=feature_importance_df)
plt.xlabel('Feature Importance by Weight (%)')
plt.title('XGBoost Feature Importance')
plt.tight_layout()
plt.show()



df['rolling_avg'] = (
    df.groupby('plant')['price']
      .apply(lambda x: x.rolling(window=3, min_periods=1).mean())
      .reset_index(level=0, drop=True)
)


df['rolling_avg_3'] = (
    df.groupby('plant')['price']
      .apply(lambda x: x.rolling(window=3, min_periods=1).mean())
      .reset_index(level=0, drop=True)
)

# pct_change within plant
df['pct_change'] = (
    df.groupby('plant')['price']
      .apply(lambda x: x.pct_change())
      .reset_index(level=0, drop=True)
)

# lag1 (previous row value in same plant)
df['lag1'] = (
    df.groupby('plant')['price']
      .shift(1)
)

# EMA with span=6 within plant
df['ema6'] = (
    df.groupby('plant')['price']
      .apply(lambda x: x.ewm(span=6, adjust=False).mean())
      .reset_index(level=0, drop=True)
)
 
