import pandas as pd

def save_non_overlapping_12month_costs_all_months(df, months_list, output_filename='warranty_costs_12months_nonoverlapping.xlsx'):
    # Ensure datetime conversion for relevant columns
    df['DISPATCH_MONTH'] = pd.to_datetime(df['DISPATCH_MONTH'], format='%Y-%m')
    df['WARRANTY_MONTH'] = pd.to_datetime(df['WARRANTY_MONTH'], format='%Y-%m')

    with pd.ExcelWriter(output_filename, engine='xlsxwriter') as writer:
        for month in months_list:
            ref_date = pd.to_datetime(month, format='%Y-%m')
            start_date = ref_date - pd.DateOffset(months=60)

            # Filter dispatch months within last 60 months
            filtered_df = df[(df['DISPATCH_MONTH'] > start_date) & (df['DISPATCH_MONTH'] <= ref_date)]

            # Filter warranty months starting from reference month
            future_df = filtered_df[filtered_df['WARRANTY_MONTH'] >= ref_date].copy()

            # Sorted unique warranty months
            warranty_months = future_df['WARRANTY_MONTH'].drop_duplicates().sort_values().to_list()

            results = []
            i = 0
            n = len(warranty_months)
            while i < n:
                start_month = warranty_months[i]
                # Calculate the end month, max 12 months ahead or until last available month
                max_end_idx = min(i + 12, n)
                end_month = warranty_months[max_end_idx - 1]

                # Select months between start_month and end_month inclusive
                range_months = [m for m in warranty_months if start_month <= m <= end_month]

                cost_sum = future_df[future_df['WARRANTY_MONTH'].isin(range_months)]['WARRANTY_COST'].sum()

                results.append({
                    'months': len(range_months),
                    'start_date': start_month.strftime('%Y-%m'),
                    'end_date': end_month.strftime('%Y-%m'),
                    'cost': cost_sum
                })

                # Move to the next start index, which is just after the current end_month
                i = max_end_idx

            summary_df = pd.DataFrame(results)

            # Save the summary dataframe to the sheet named as the month
            summary_df.to_excel(writer, sheet_name=month, index=False)

    print(f'Data saved in {output_filename}')

# Example usage:
# months = ['2023-01', '2023-02', '2023-03']
# save_non_overlapping_12month_costs_all_months(df, months)




##################################### DISPATCH VOLUMES ########################################################
import pandas as pd

def save_volume_by_months_sheets(df_volume, months_list, output_filename='volume_summary_by_month.xlsx'):
    df_volume['DISPATCH_MONTH'] = pd.to_datetime(df_volume['DISPATCH_MONTH'], format='%Y-%m')

    with pd.ExcelWriter(output_filename, engine='xlsxwriter') as writer:
        for month in months_list:
            ref_date = pd.to_datetime(month, format='%Y-%m')
            start_date = ref_date - pd.DateOffset(months=60)

            filtered_df = df_volume[(df_volume['DISPATCH_MONTH'] > start_date) & (df_volume['DISPATCH_MONTH'] <= ref_date)]
            total_volume = filtered_df['VOLUME'].sum()

            # Create a small dataframe with results to save to Excel
            df_to_save = pd.DataFrame({'reference_month': [month], 'total_volume': [total_volume]})

            df_to_save.to_excel(writer, sheet_name=month, index=False)

    print(f'Data saved in {output_filename}')

# Example usage:
# months = ['2023-01', '2023-02', '2023-03']
# save_volume_by_months_sheets(df_volume, months)

