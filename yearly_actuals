import pandas as pd

def sum_costs_based_on_12_months(df, reference_month):
    # Convert to datetime
    df['DISPATCH_MONTH'] = pd.to_datetime(df['DISPATCH_MONTH'], format='%Y-%m')
    df['WARRANTY_MONTH'] = pd.to_datetime(df['WARRANTY_MONTH'], format='%Y-%m')
    ref_date = pd.to_datetime(reference_month, format='%Y-%m')

    # Filter dispatch months within last 60 months
    start_date = ref_date - pd.DateOffset(months=60)
    filtered_df = df[(df['DISPATCH_MONTH'] > start_date) & (df['DISPATCH_MONTH'] <= ref_date)]

    # Filter warranty months starting from reference_month
    future_df = filtered_df[filtered_df['WARRANTY_MONTH'] >= ref_date].copy()

    # Find unique warranty months >= ref_date, sorted
    warranty_months = future_df['WARRANTY_MONTH'].drop_duplicates().sort_values()

    results = []

    # Iterate over warranty months to calculate sum over next 12 months or less if fewer remain
    for i, start_month in enumerate(warranty_months):
        end_idx = i + 12
        months_range = warranty_months.iloc[i:end_idx]

        cost_sum = future_df[future_df['WARRANTY_MONTH'].isin(months_range)]['WARRANTY_COST'].sum()

        results.append({
            'months': len(months_range),
            'start_date': months_range.min().strftime('%Y-%m'),
            'end_date': months_range.max().strftime('%Y-%m'),
            'cost': cost_sum
        })

    return pd.DataFrame(results)

# Example usage:
# df_costs_summary = sum_costs_based_on_12_months(df, '2023-01')
# print(df_costs_summary)
